package dataStructure;

public class LinkedList {
    //Cabeça é um nó
    private Node head;
    //Calda é um nó
    private Node tail;
    //Tamanho é um número inteiro
    private int length;


    //Uma nova classe inter chamada Nó que conterá 2 campos
    //Todo aponta para um próximo nó

    class Node{
        String data;
        //nome do próximo construtor
        Node next;


        Node(String data){
            //Construtor que recebe uma informação e vai ser armazenada no nó
            this.data = data;
        }
    }

    //Construtor da minha lista ligada. Da mesma forma que um nó
    public LinkedList(String data){
        length = 1; //Tamanho 1
        Node newNode = new Node(data);
        //A cabeça e a calda apontando para o único nó da lista
        head = newNode;
        tail = newNode;

    }
    public void getHead(){
        if (this.head == null){
            System.out.println("Lista vazia.");
        } else {
            System.out.println("Head: " + head.data);
        }
    }

    public void getTail(){
        if (this.tail == null){
            System.out.println("Lista vazia.");
        } else {
            System.out.println("Tail: " + tail.data);
        }
    }

    public void getLenght(){
        System.out.println("Length: " + this.length);

    }

    //Método de tornar a lista vazia - Pega os dois nó e apontar para null
    public void makeEmpty(){
        head = null;
        tail = null;
        length = 0;
    }

    //Método de print
    public void print(){
        System.out.println("#######################");
        Node temp = this.head;
        while (temp != null){
            System.out.println(temp.data);
            temp = temp.next;
        }

    }

    public void append(String data){
        Node newNode = new Node(data);
        if (length == 0){
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
        length++;
    }

    public Node removeLast(){
        if (length ==0) return null;
        Node pre = head;
        Node temp = null;
        while (pre.next != tail){
            pre = pre.next;
        }

        temp = tail;
        tail = pre;
        tail.next = null;

        length--;
        if (length == 0){
            head = null;
            tail = null;
        }
        return temp;
    }

    //Implementação do método prepend para inserir no ínicio de uma lista (Head)
    public void preprend (String data){
        Node newNode = new Node(data);
        if (length == 0){
            head = newNode;
            tail = newNode;
        }else {
            newNode.next = head;
            head = newNode;
        }
        //Não pode esquecer de aumentar a lista
        length++;
    }

    //Método para remover do Início (head)
    public Node removeFirst(){
        if (length == 0) return null;
        Node temp = head;
        head = head.next;
        temp.next = null;
        length--;
        if (length == 0){
            head = null;
            tail = null;
        }
        return temp;
    }

    //Metodo get (retorna um nó) dado determinado índice para remover
    public Node get(int index){
        if (index <0 || index >= length) return null;
        Node temp = head;
        for (int i = 0; i < index; i++){
            temp = temp.next;
        }
        return temp;
    }

    //Metodo set (inserir) em uma posição específica
    public boolean insert(int index, String data){
        if (index < 0 || index > length) return false;
        if (index == 0){
            preprend(data);
            return true;
        }
        if (index == length){
            append(data);
            return true;
        }
        Node newNode = new Node(data);
        Node temp = get(index - 1);
        newNode.next = temp.next;
        temp.next = newNode;
        length++;
        return true;
    }

    public boolean set(int index, String data){
        Node temp = get(index);
        if (temp != null){
            temp.data = data;
            return true;
        }
        return false;
    }


    //Método remover de uma determinada posição
    public Node remove(int index){
        if (index<0 || index >= length) return null;
        if (index == 0) return removeFirst();
        if (index == length - 1) return removeLast();

        Node prev = get(index-1);
        Node temp = prev.next;

        prev.next = temp.next;
        temp.next = null;
        length--;

        return temp;
    }


    public static void main (String[] args){
        LinkedList list = new LinkedList("Elemento 1");

        //Chamando o construtor append para adicionar a lista
        list.append("Elemento 2");
        list.append("Elemento 3");
        list.preprend("Elemento 0");
        list.insert(3,"Elemento 2.5");
        list.remove(2);

        //System.out.println(list.get(2).data);

//        System.out.println(list.removeFirst().data);
//        list.print();

//        list.set(1, "Elemento 0.5");
        list.print();
        //Métodos
//        list.getHead();
//        list.getTail();
//        list.getLenght();
//        list.print();

    }
}
